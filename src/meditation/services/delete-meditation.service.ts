import {
    Injectable,
    Logger,
    NotFoundException,
    BadRequestException,
  } from '@nestjs/common';
  import { MeditationRepository } from '../meditation.repository';
  import { MediaItemProcessor } from 'src/share/media/media-item-processor';
  import { AwsS3Service } from 'src/aws/aws-s3.service';
  import { RouteService } from 'src/route/route.service';
  
  @Injectable()
  export class DeleteMeditationService {
    private readonly logger = new Logger(DeleteMeditationService.name);
  
    constructor(
      private readonly meditationRepo: MeditationRepository,
      private readonly mediaItemProcessor: MediaItemProcessor,
      private readonly s3Service: AwsS3Service,
      private readonly routeService: RouteService,
    ) {}
  
    async execute(id: string): Promise<void> {
      this.logger.log(`üóëÔ∏è Iniciando remo√ß√£o da medita√ß√£o ID=${id}`);
  
      if (!id || typeof id !== 'string') {
        throw new BadRequestException('ID inv√°lido fornecido para remo√ß√£o');
      }
  
      const meditation = await this.meditationRepo.findOneWithRelations(id);
  
      if (!meditation) {
        this.logger.warn(`‚ö†Ô∏è Nenhuma medita√ß√£o encontrada com ID=${id}`);
        throw new NotFoundException('Medita√ß√£o n√£o encontrada');
      }
  
      this.logger.log('üéûÔ∏è Buscando m√≠dias associadas √† medita√ß√£o...');
      const media = await this.mediaItemProcessor.findMediaItemsByTarget(id, 'meditation');
  
      if (media.length > 0) {
        this.logger.log(`üßπ Removendo ${media.length} m√≠dia(s)...`);
        await this.mediaItemProcessor.deleteMediaItems(
          media,
          this.s3Service.delete.bind(this.s3Service),
        );
        this.logger.log('‚úÖ M√≠dias removidas com sucesso.');
      } else {
        this.logger.warn('‚ö†Ô∏è Nenhuma m√≠dia encontrada para remover.');
      }
  
      this.logger.log('üõ§Ô∏è Removendo rota associada √† medita√ß√£o...');
      await this.routeService.removeRouteByEntity('meditation', id);
      this.logger.log('‚úÖ Rota removida com sucesso.');
  
      this.logger.log('üóÉÔ∏è Excluindo entidade da medita√ß√£o do banco de dados...');
      await this.meditationRepo.delete(id);
      this.logger.log('‚úÖ Medita√ß√£o removida com sucesso.');
    }
  }
  